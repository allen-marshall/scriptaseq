"""Defines a tree node type for a sequence component tree."""

from PyQt5.Qt import QMenu, QCoreApplication

from scriptaseq.internal.gui.undo_commands.seq_component_tree import DeleteSequenceComponentTreeNodeCommand,\
  AddSequenceComponentTreeNodeCommand
from scriptaseq.named_tree_node import NamedTreeNode
from scriptaseq.internal.seq_component_tree.component_types import ContainerSequenceComponentType,\
  SUPPORTED_COMPONENT_TYPES

class SequenceComponentNode(NamedTreeNode):
  """Class for nodes in a sequence component tree."""
  
  def __init__(self, name, owning_project_tree_node, component_type=ContainerSequenceComponentType,
    instanced_project_tree_node=None):
    """Constructor.
    The constructed node initially has no parent.
    Raises ValueError if the name is invalid, the node cannot be added to the specified parent, or both parent and
    owning_project_tree_node are unspecified.
    name -- Name for the new node.
    component_type -- BaseSequenceComponentType subclass indicating the type of component.
    owning_project_tree_node -- Reference to the project tree node that owns the sequence component tree to which this
      node belongs.
    instanced_project_tree_node -- Reference to the project tree node that this node is instancing, or None if this node
      is not instancing a project tree node.
    """
    super().__init__(name, True)
    
    self.owning_project_tree_node = owning_project_tree_node
    self.component_type = component_type
    self.instanced_project_tree_node = instanced_project_tree_node
  
  def is_in_instance(self):
    """Checks whether this node is part of an instancing subtree."""
    return self.instanced_project_tree_node is not None
  
  def is_instance_root(self):
    """Checks whether this node is the root of an instancing subtree."""
    return self.is_in_instance() and (self.parent is None or self.parent.is_in_instance())
  
  def make_context_menu(self, undo_stack, seq_component_tree_controller, parent=None):
    """Creates a context menu for this node.
    undo_stack -- QUndoStack that should receive undoable editing commands generated by the menu.
    seq_component_tree_controller -- SequenceComponentTreeController in charge of high-level changes to the sequence
      component tree.
    parent -- Parent QObject for the context menu.
    """
    menu = QMenu(parent)
    
    # Add menu items for creating child nodes, if creating children is allowed.
    if self.can_have_children and not self.is_in_instance():
      add_menu = menu.addMenu(QCoreApplication.translate('SequenceComponentNode', '&Create Child'))
      def add_func_maker(component_type):
        def add_func():
          new_node = SequenceComponentNode(self.suggest_child_name(component_type.node_default_name),
            component_type=component_type, owning_project_tree_node=self.owning_project_tree_node)
          undo_stack.push(AddSequenceComponentTreeNodeCommand(seq_component_tree_controller, new_node, self))
        return add_func
      for component_type in SUPPORTED_COMPONENT_TYPES:
        add_action = add_menu.addAction(component_type.get_icon(), component_type.menu_text)
        add_action.triggered.connect(add_func_maker(component_type))
    
    # Add a menu item for deleting the node, if it can be deleted.
    if self.parent is not None and ((not self.is_in_instance()) or self.is_instance_root()):
      def delete_func():
        undo_stack.push(DeleteSequenceComponentTreeNodeCommand(seq_component_tree_controller, self))
      delete_action = menu.addAction(QCoreApplication.translate('SequenceComponentNode', '&Delete'))
      delete_action.triggered.connect(delete_func)
    
    return menu
  
  def verify_can_add_as_child(self, node):
    super().verify_can_add_as_child(node)
    
    if node.owning_project_tree_node is not self.owning_project_tree_node:
      raise ValueError(
        QCoreApplication.translate('SequenceComponentNode', 'Cannot mix nodes belonging to different sequence component trees'))