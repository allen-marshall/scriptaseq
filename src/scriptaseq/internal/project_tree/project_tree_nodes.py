"""Defines tree node types for the project tree."""

from PyQt5.Qt import QIcon, QMenu, QCoreApplication

from scriptaseq.internal.gui.qt_util import make_multires_icon
from scriptaseq.internal.gui.undo_commands.project_tree import DeleteProjectTreeNodeCommand
from scriptaseq.named_tree_node import NamedTreeNode


class BaseProjectTreeNode(NamedTreeNode):
  """Base class for nodes in the project tree."""
  
  @classmethod
  def make_icon(cls):
    """Makes a QIcon representing nodes of this class.
    Subclasses should override this. Default implementation returns an empty QIcon.
    """
    return QIcon()
  
  def make_context_menu(self, undo_stack, project_tree_controller, parent=None):
    """Creates a context menu for this node.
    undo_stack -- QUndoStack that should receive undoable editing commands generated by the menu.
    project_tree_controller -- ProjectTreeController in charge of high-level changes to the project tree.
    parent -- Parent QObject for the context menu.
    """
    menu = QMenu(parent)
    
    # Add menu items for creating child nodes, if the node is allowed to have children.
    if self.can_have_children:
      # TODO
      pass
    
    # Add a menu item for deleting the node, if it is not the root node.
    if self.parent is not None:
      def delete_func():
        undo_stack.push(DeleteProjectTreeNodeCommand(project_tree_controller, self))
      delete_action = menu.addAction(QCoreApplication.translate('BaseProjectTreeNode', '&Delete'))
      delete_action.triggered.connect(delete_func)
    
    return menu

class DirProjectTreeNode(BaseProjectTreeNode):
  """Class for project tree nodes that represent directories inside the project."""
  
  def __init__(self, name, parent=None):
    """Constructor.
    Raises ValueError if the name is invalid or the node cannot be added to the specified parent.
    name -- Name for the new node.
    parent -- BaseProjectTreeNode reference indicating the parent to which the node will be attached as a child. The
      default value is None, meaning the node will initially have no parent.
    """
    super().__init__(name, True, parent)
  
  @classmethod
  def make_icon(cls):
    return make_multires_icon(':/icons/project_tree/dir')

class SequenceProjectTreeNode(BaseProjectTreeNode):
  """Class for project tree nodes that represent Sequences."""
  
  def __init__(self, name, parent=None):
    """Constructor.
    Raises ValueError if the name is invalid or the node cannot be added to the specified parent.
    name -- Name for the new node.
    parent -- BaseProjectTreeNode reference indicating the parent to which the node will be attached as a child. The
      default value is None, meaning the node will initially have no parent.
    """
    super().__init__(name, False, parent)
  
  @classmethod
  def make_icon(cls):
    return make_multires_icon(':/icons/project_tree/sequence')