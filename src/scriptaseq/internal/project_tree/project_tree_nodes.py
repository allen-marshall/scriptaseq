"""Defines tree node types for the project tree."""

from PyQt5.Qt import QIcon, QMenu, QCoreApplication

from scriptaseq.internal.gui.qt_util import make_multires_icon
from scriptaseq.internal.gui.undo_commands.project_tree import DeleteProjectTreeNodeCommand, AddProjectTreeNodeCommand
from scriptaseq.named_tree_node import NamedTreeNode
from scriptaseq.internal.seq_component_tree.component_tree_nodes import SequenceComponentNode

# Name prefix to use for default directory node names.
_DIR_NODE_NAME_PREFIX = 'dir'

# Name prefix to use for default sequence node names.
_SEQUENCE_NODE_NAME_PREFIX = 'seq'

# Name for the root node in a sequence component tree.
_ROOT_SEQUENCE_COMPONENT_NODE_NAME = 'root'

class BaseProjectTreeNode(NamedTreeNode):
  """Base class for nodes in the project tree."""
  
  # TODO: Add a memoization decorator to this method.
  @classmethod
  def get_icon(cls):
    """Gets a QIcon representing nodes of this class, creating it if it has not been previously created.
    This method should not be called before the Qt application's resource loading configuration has been set up.
    Subclasses should generally override make_icon instead of this method.
    """
    return cls.make_icon()
  
  @classmethod
  def make_icon(cls):
    """Makes a QIcon representing nodes of this class.
    This method should not be called before the Qt application's resource loading configuration has been set up.
    Subclasses should override this. Default implementation returns an empty QIcon.
    """
    return QIcon()
  
  def make_context_menu(self, undo_stack, project_tree_controller, parent=None):
    """Creates a context menu for this node.
    undo_stack -- QUndoStack that should receive undoable editing commands generated by the menu.
    project_tree_controller -- ProjectTreeController in charge of high-level changes to the project tree.
    parent -- Parent QObject for the context menu.
    """
    menu = QMenu(parent)
    
    # Add menu items for creating child nodes, if the node is allowed to have children.
    if self.can_have_children:
      def add_dir_func():
        new_node = DirProjectTreeNode(self.suggest_child_name(_DIR_NODE_NAME_PREFIX))
        undo_stack.push(AddProjectTreeNodeCommand(project_tree_controller, new_node, self))
      def add_sequence_func():
        new_node = SequenceProjectTreeNode(self.suggest_child_name(_SEQUENCE_NODE_NAME_PREFIX))
        undo_stack.push(AddProjectTreeNodeCommand(project_tree_controller, new_node, self))
      add_menu = menu.addMenu(QCoreApplication.translate('BaseProjectTreeNode', '&Create Child'))
      add_dir_action = add_menu.addAction(DirProjectTreeNode.get_icon(),
        QCoreApplication.translate('BaseProjectTreeNode', '&Directory'))
      add_sequence_action = add_menu.addAction(SequenceProjectTreeNode.get_icon(),
        QCoreApplication.translate('BaseProjectTreeNode', '&Sequence'))
      add_dir_action.triggered.connect(add_dir_func)
      add_sequence_action.triggered.connect(add_sequence_func)
    
    # Add a menu item for deleting the node, if it is not the root node.
    if self.parent is not None:
      def delete_func():
        undo_stack.push(DeleteProjectTreeNodeCommand(project_tree_controller, self))
      delete_action = menu.addAction(QCoreApplication.translate('BaseProjectTreeNode', '&Delete'))
      delete_action.triggered.connect(delete_func)
    
    return menu

class DirProjectTreeNode(BaseProjectTreeNode):
  """Class for project tree nodes that represent directories inside the project."""
  
  def __init__(self, name, parent=None):
    """Constructor.
    Raises ValueError if the name is invalid or the node cannot be added to the specified parent.
    name -- Name for the new node.
    parent -- BaseProjectTreeNode reference indicating the parent to which the node will be attached as a child. The
      default value is None, meaning the node will initially have no parent.
    """
    super().__init__(name, True, parent)
  
  @classmethod
  def make_icon(cls):
    return make_multires_icon(':/icons/project_tree/dir')

class SequenceProjectTreeNode(BaseProjectTreeNode):
  """Class for project tree nodes that represent Sequences."""
  
  def __init__(self, name, parent=None):
    """Constructor.
    Raises ValueError if the name is invalid or the node cannot be added to the specified parent.
    name -- Name for the new node.
    parent -- BaseProjectTreeNode reference indicating the parent to which the node will be attached as a child. The
      default value is None, meaning the node will initially have no parent.
    """
    super().__init__(name, False, parent)
    
    self.root_seq_component_node = SequenceComponentNode(_ROOT_SEQUENCE_COMPONENT_NODE_NAME)
  
  @classmethod
  def make_icon(cls):
    return make_multires_icon(':/icons/project_tree/sequence')
  
  def make_context_menu(self, undo_stack, project_tree_controller, parent=None):
    menu = super().make_context_menu(undo_stack, project_tree_controller, parent)
    
    # Add a menu item for making the sequence the active node.
    def make_active_func():
      project_tree_controller.active_node = self
    make_active_action = menu.addAction(QCoreApplication.translate('SequenceProjectTreeNode', 'Make &Active'))
    make_active_action.triggered.connect(make_active_func)
    
    return menu
    
    