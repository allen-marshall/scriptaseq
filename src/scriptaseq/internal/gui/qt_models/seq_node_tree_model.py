"""Functionality for modeling a Sequence Node tree in Qt"""

from PyQt5 import QtCore
from PyQt5.Qt import QAbstractItemModel, QModelIndex, QVariant, QIcon


class SeqNodeTreeModel(QAbstractItemModel):
  """PyQt model for the Sequence Node tree"""
  
  def __init__(self, project, undo_stack, parent=None):
    """Constructor
    project -- ProjectModel object containing the project information.
    undo_stack -- Undo stack to which undo commands generated by this model should be pushed.
    parent -- Parent QObject for the model.
    """
    super().__init__(parent)
    self._project = project
    self._undo_stack = undo_stack
  
  def index(self, row, column, parent=QModelIndex()):
    if not self.hasIndex(row, column, parent):
      return QModelIndex()
    
    # Construct an index for the root Sequence Node if the parent index is invalid.
    if not parent.isValid():
      return self.createIndex(row, column, self._project.root_node)
    
    # Find the Sequence Node referenced by the parent index.
    parent_seq_node = parent.internalPointer()
    
    # Create an index with a reference to the child Sequence Node as its internal pointer.
    child_seq_node = parent_seq_node.child_at_idx(row)
    return self.createIndex(row, column, child_seq_node)
  
  def parent(self, index):
    if not index.isValid():
      return QModelIndex()
    
    # Get the parent of the Sequence Node referenced by the index, if it is not the root node.
    parent_seq_node = index.internalPointer().parent
    if parent_seq_node is None:
      return QModelIndex()
    
    # Determine the row for the parent index.
    row = 0
    if parent_seq_node.parent is not None:
      row = parent_seq_node.idx_in_parent()
    
    return self.createIndex(row, 0, parent_seq_node)
  
  def rowCount(self, parent):
    if parent.column() > 0:
      return 0
    
    # The root "table" should have one row corresponding to the root node.
    if not parent.isValid():
      return 1
    
    parent_seq_node = parent.internalPointer()
    return len(parent_seq_node.children)
  
  def columnCount(self, parent):
    return 1
  
  def data(self, index, role):
    if not index.isValid():
      return QVariant()
    
    seq_node = index.internalPointer()
    
    if index.column() == 0:
      if role == QtCore.Qt.DisplayRole:
        return seq_node.name
    
    return QVariant()
  
  def flags(self, index):
    if not index.isValid():
      return QtCore.Qt.NoItemFlags
    
    return QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable \
      | QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsDropEnabled