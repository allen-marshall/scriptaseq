"""Functionality related to Property Binders"""
import copy


# A binding script that causes a property to bind only to the node in which it is defined.
SELF_ONLY_BIND_SCRIPT = 'inherit = ancestor is descendant'

# A binding script that causes a property to bind only to direct children of the node in which it is defined.
CHILDREN_ONLY_BIND_SCRIPT = 'inherit = ancestor is descendant.parent'

# A binding script that causes a property to bind to all descendants of the node in which it is defined, excluding that
# node itself.
DESCENDANTS_ONLY_BIND_SCRIPT = 'inherit = ancestor in descendant.ancestors'

# A binding script that causes a property to bind to the node in which it is defined and all of its descendants.
ALL_BIND_SCRIPT = 'inherit = True'

class PropType:
  """Represents a type that a property binder's value is expected to have.
  PropTypes are used to determine what type of GUI to show when editing a property value.
  """
  def __init__(self, name, def_val, uses_scripted_val=False):
    """Constructor
    WARNING: If uses_scripted_val is true, any string passed as the def_val parameter will likely be executed as a
    Python script at some point. Avoid passing untrusted code in def_val when uses_scripted_val is true.
    name -- User-displayable name for this property value type.
    def_val -- Default stored value for properties of this type. If uses_scripted_val is true, this should be a script
      that constructs the value rather than the value itself.
    uses_scripted_val -- Indicates whether properties of this type should store the value indirectly as a value
      construction script, or directly as a value object (the default).
    """
    self.name = name
    self.def_val = def_val
    self.uses_scripted_val = uses_scripted_val

# PropType for string properties.
STRING_PROP_TYPE = PropType('String', '')

# PropType for values that are to be generated by a script.
SCRIPTED_VAL_PROP_TYPE = PropType('Scripted Value', 'value = None', True)

# PropType for scripts (not to be confused with scripted values).
SCRIPT_PROP_TYPE = PropType('Script', '')

# List of PropTypes supported by ScriptASeq.
SUPPORTED_PROP_TYPES = [STRING_PROP_TYPE, SCRIPTED_VAL_PROP_TYPE, SCRIPT_PROP_TYPE]

class PropBinder:
  """Represents a Property Binder that can be attached to a Sequence Node.
  A Property Binder contains a property name and value, along with a binding script that determines to which nodes the
  property name/value pair will be applied."""
  
  def __init__(self, prop_name, prop_type, prop_val=None, bind_script=SELF_ONLY_BIND_SCRIPT):
    """Constructor
    WARNING: Any string passed as the bind_script parameter will likely be executed as a Python script at some point.
    Avoid passing untrusted code in bind_script. The same precaution applies to prop_val if prop_type.uses_scripted_val
    is true.
    prop_name -- Name of the property.
    prop_type -- PropType object indicating what type the property value is expected to have. This is meant to inform
      the GUI of what type of widget(s) to use for editing the property value.
    prop_val -- Initial value for the property, or value construction script if prop_type.uses_scripted_val is true. If
      the value is None, the default value for the specified PropType will be used.
    bind_script -- Binding script to determine to which nodes the property name/value pair will be applied.
    """
    self.prop_name = prop_name
    self.prop_type = prop_type
    self.bind_script = bind_script
    self.prop_val = prop_val if prop_val is not None else copy.deepcopy(prop_type.def_val)
  
  def applies_to_descendant(self, ancestor, descendant):
    """Checks if this Property Binder applies to the specified descendant node.
    Note: This method can run user-supplied scripts, so the caller should generally be prepared to handle all exceptions
    gracefully.
    ancestor -- The Sequence Node to which this Property Binder is directly attached.
    descendant -- The descendant of the specified ancestor to check. May be the same node as the ancestor, but must
      otherwise be a descendant of the ancestor.
    root -- Reference to the root Sequence Node. Can be passed as an argument for efficiency. If this is None, the root
      will be found by traversing the tree upward from the ancestor.
    """
    # Call the binding script to determine whether the Property Binder applies.
    env = {'ancestor' : ancestor, 'descendant' : descendant, 'inherit' : False}
    exec(self.bind_script, env)
    return env['inherit']